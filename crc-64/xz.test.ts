import { assertEquals } from '@std/assert';

import CRC_64_XZ from './xz.ts';

const table = `
0000000000000000 b32e4cbe03a75f6f f4843657a840a05b 47aa7ae9abe7ff34
7bd0c384ff8f5e33 c8fe8f3afc28015c 8f54f5d357cffe68 3c7ab96d5468a107
f7a18709ff1ebc66 448fcbb7fcb9e309 0325b15e575e1c3d b00bfde054f94352
8c71448d0091e255 3f5f08330336bd3a 78f572daa8d1420e cbdb3e64ab761d61
7d9ba13851336649 ceb5ed8652943926 891f976ff973c612 3a31dbd1fad4997d
064b62bcaebc387a b5652e02ad1b6715 f2cf54eb06fc9821 41e11855055bc74e
8a3a2631ae2dda2f 39146a8fad8a8540 7ebe1066066d7a74 cd905cd805ca251b
f1eae5b551a2841c 42c4a90b5205db73 056ed3e2f9e22447 b6409f5cfa457b28
fb374270a266cc92 48190ecea1c193fd 0fb374270a266cc9 bc9d3899098133a6
80e781f45de992a1 33c9cd4a5e4ecdce 7463b7a3f5a932fa c74dfb1df60e6d95
0c96c5795d7870f4 bfb889c75edf2f9b f812f32ef538d0af 4b3cbf90f69f8fc0
774606fda2f72ec7 c4684a43a15071a8 83c230aa0ab78e9c 30ec7c140910d1f3
86ace348f355aadb 3582aff6f0f2f5b4 7228d51f5b150a80 c10699a158b255ef
fd7c20cc0cdaf4e8 4e526c720f7dab87 09f8169ba49a54b3 bad65a25a73d0bdc
710d64410c4b16bd c22328ff0fec49d2 85895216a40bb6e6 36a71ea8a7ace989
0adda7c5f3c4488e b9f3eb7bf06317e1 fe5991925b84e8d5 4d77dd2c5823b7ba
64b62bcaebc387a1 d7986774e864d8ce 90321d9d438327fa 231c512340247895
1f66e84e144cd992 ac48a4f017eb86fd ebe2de19bc0c79c9 58cc92a7bfab26a6
9317acc314dd3bc7 2039e07d177a64a8 67939a94bc9d9b9c d4bdd62abf3ac4f3
e8c76f47eb5265f4 5be923f9e8f53a9b 1c4359104312c5af af6d15ae40b59ac0
192d8af2baf0e1e8 aa03c64cb957be87 eda9bca512b041b3 5e87f01b11171edc
62fd4976457fbfdb d1d305c846d8e0b4 96797f21ed3f1f80 2557339fee9840ef
ee8c0dfb45ee5d8e 5da24145464902e1 1a083bacedaefdd5 a9267712ee09a2ba
955cce7fba6103bd 267282c1b9c65cd2 61d8f8281221a3e6 d2f6b4961186fc89
9f8169ba49a54b33 2caf25044a02145c 6b055fede1e5eb68 d82b1353e242b407
e451aa3eb62a1500 577fe680b58d4a6f 10d59c691e6ab55b a3fbd0d71dcdea34
6820eeb3b6bbf755 db0ea20db51ca83a 9ca4d8e41efb570e 2f8a945a1d5c0861
13f02d374934a966 a0de61894a93f609 e7741b60e174093d 545a57dee2d35652
e21ac88218962d7a 5134843c1b317215 169efed5b0d68d21 a5b0b26bb371d24e
99ca0b06e7197349 2ae447b8e4be2c26 6d4e3d514f59d312 de6071ef4cfe8c7d
15bb4f8be788911c a6950335e42fce73 e13f79dc4fc83147 521135624c6f6e28
6e6b8c0f1807cf2f dd45c0b11ba09040 9aefba58b0476f74 29c1f6e6b3e0301b
c96c5795d7870f42 7a421b2bd420502d 3de861c27fc7af19 8ec62d7c7c60f076
b2bc941128085171 0192d8af2baf0e1e 4638a2468048f12a f516eef883efae45
3ecdd09c2899b324 8de39c222b3eec4b ca49e6cb80d9137f 7967aa75837e4c10
451d1318d716ed17 f6335fa6d4b1b278 b199254f7f564d4c 02b769f17cf11223
b4f7f6ad86b4690b 07d9ba1385133664 4073c0fa2ef4c950 f35d8c442d53963f
cf273529793b3738 7c0979977a9c6857 3ba3037ed17b9763 888d4fc0d2dcc80c
435671a479aad56d f0783d1a7a0d8a02 b7d247f3d1ea7536 04fc0b4dd24d2a59
3886b22086258b5e 8ba8fe9e8582d431 cc0284772e652b05 7f2cc8c92dc2746a
325b15e575e1c3d0 8175595b76469cbf c6df23b2dda1638b 75f16f0cde063ce4
498bd6618a6e9de3 faa59adf89c9c28c bd0fe036222e3db8 0e21ac88218962d7
c5fa92ec8aff7fb6 76d4de52895820d9 317ea4bb22bfdfed 8250e80521188082
be2a516875702185 0d041dd676d77eea 4aae673fdd3081de f9802b81de97deb1
4fc0b4dd24d2a599 fceef8632775faf6 bb44828a8c9205c2 086ace348f355aad
34107759db5dfbaa 873e3be7d8faa4c5 c094410e731d5bf1 73ba0db070ba049e
b86133d4dbcc19ff 0b4f7f6ad86b4690 4ce50583738cb9a4 ffcb493d702be6cb
c3b1f050244347cc 709fbcee27e418a3 3735c6078c03e797 841b8ab98fa4b8f8
adda7c5f3c4488e3 1ef430e13fe3d78c 595e4a08940428b8 ea7006b697a377d7
d60abfdbc3cbd6d0 6524f365c06c89bf 228e898c6b8b768b 91a0c532682c29e4
5a7bfb56c35a3485 e955b7e8c0fd6bea aeffcd016b1a94de 1dd181bf68bdcbb1
21ab38d23cd56ab6 9285746c3f7235d9 d52f0e859495caed 6601423b97329582
d041dd676d77eeaa 636f91d96ed0b1c5 24c5eb30c5374ef1 97eba78ec690119e
ab911ee392f8b099 18bf525d915feff6 5f1528b43ab810c2 ec3b640a391f4fad
27e05a6e926952cc 94ce16d091ce0da3 d3646c393a29f297 604a2087398eadf8
5c3099ea6de60cff ef1ed5546e415390 a8b4afbdc5a6aca4 1b9ae303c601f3cb
56ed3e2f9e224471 e5c372919d851b1e a26908783662e42a 114744c635c5bb45
2d3dfdab61ad1a42 9e13b115620a452d d9b9cbfcc9edba19 6a978742ca4ae576
a14cb926613cf817 1262f598629ba778 55c88f71c97c584c e6e6c3cfcadb0723
da9c7aa29eb3a624 69b2361c9d14f94b 2e184cf536f3067f 9d36004b35545910
2b769f17cf112238 9858d3a9ccb67d57 dff2a94067518263 6cdce5fe64f6dd0c
50a65c93309e7c0b e388102d33392364 a4226ac498dedc50 170c267a9b79833f
dcd7181e300f9e5e 6ff954a033a8c131 28532e49984f3e05 9b7d62f79be8616a
a707db9acf80c06d 14299724cc279f02 5383edcd67c06036 e0ada17364673f59
`.trim().split(/\s+/).map((x) => BigInt(`0x${x}`));

Deno.test('table', () => {
	assertEquals(CRC_64_XZ.table(), table);
});

Deno.test('123456789', () => {
	let c = CRC_64_XZ.init();
	c = CRC_64_XZ.update(c, new TextEncoder().encode('123456789'));
	c = CRC_64_XZ.finalize(c);
	assertEquals(c, 0x995dc9bbdf1939fan);
});
