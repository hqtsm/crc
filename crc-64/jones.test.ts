import { assertEquals } from '@std/assert';

import CRC_64_JONES from './jones.ts';

const table = `
0000000000000000 7ad870c830358979 f5b0e190606b12f2 8f689158505e9b8b
c038e5739841b68f bae095bba8743ff6 358804e3f82aa47d 4f50742bc81f2d04
ab28ecb46814fe75 d1f09c7c5821770c 5e980d24087fec87 24407dec384a65fe
6b1009c7f05548fa 11c8790fc060c183 9ea0e857903e5a08 e478989fa00bd371
7d08ff3b88be6f81 07d08ff3b88be6f8 88b81eabe8d57d73 f2606e63d8e0f40a
bd301a4810ffd90e c7e86a8020ca5077 4880fbd87094cbfc 32588b1040a14285
d620138fe0aa91f4 acf86347d09f188d 2390f21f80c18306 594882d7b0f40a7f
1618f6fc78eb277b 6cc0863448deae02 e3a8176c18803589 997067a428b5bcf0
fa11fe77117cdf02 80c98ebf2149567b 0fa11fe77117cdf0 75796f2f41224489
3a291b04893d698d 40f16bccb908e0f4 cf99fa94e9567b7f b5418a5cd963f206
513912c379682177 2be1620b495da80e a489f35319033385 de51839b2936bafc
9101f7b0e12997f8 ebd98778d11c1e81 64b116208142850a 1e6966e8b1770c73
8719014c99c2b083 fdc17184a9f739fa 72a9e0dcf9a9a271 08719014c99c2b08
4721e43f0183060c 3df994f731b68f75 b29105af61e814fe c849756751dd9d87
2c31edf8f1d64ef6 56e99d30c1e3c78f d9810c6891bd5c04 a3597ca0a188d57d
ec09088b6997f879 96d1784359a27100 19b9e91b09fcea8b 636199d339c963f2
df7adabd7a6e2d6f a5a2aa754a5ba416 2aca3b2d1a053f9d 50124be52a30b6e4
1f423fcee22f9be0 659a4f06d21a1299 eaf2de5e82448912 902aae96b271006b
74523609127ad31a 0e8a46c1224f5a63 81e2d7997211c1e8 fb3aa75142244891
b46ad37a8a3b6595 ceb2a3b2ba0eecec 41da32eaea507767 3b024222da65fe1e
a2722586f2d042ee d8aa554ec2e5cb97 57c2c41692bb501c 2d1ab4dea28ed965
624ac0f56a91f461 1892b03d5aa47d18 97fa21650afae693 ed2251ad3acf6fea
095ac9329ac4bc9b 7382b9faaaf135e2 fcea28a2faafae69 8632586aca9a2710
c9622c4102850a14 b3ba5c8932b0836d 3cd2cdd162ee18e6 460abd1952db919f
256b24ca6b12f26d 5fb354025b277b14 d0dbc55a0b79e09f aa03b5923b4c69e6
e553c1b9f35344e2 9f8bb171c366cd9b 10e3202993385610 6a3b50e1a30ddf69
8e43c87e03060c18 f49bb8b633338561 7bf329ee636d1eea 012b592653589793
4e7b2d0d9b47ba97 34a35dc5ab7233ee bbcbcc9dfb2ca865 c113bc55cb19211c
5863dbf1e3ac9dec 22bbab39d3991495 add33a6183c78f1e d70b4aa9b3f20667
985b3e827bed2b63 e2834e4a4bd8a21a 6debdf121b863991 1733afda2bb3b0e8
f34b37458bb86399 8993478dbb8deae0 06fbd6d5ebd3716b 7c23a61ddbe6f812
3373d23613f9d516 49aba2fe23cc5c6f c6c333a67392c7e4 bc1b436e43a74e9d
95ac9329ac4bc9b5 ef74e3e19c7e40cc 601c72b9cc20db47 1ac40271fc15523e
5594765a340a7f3a 2f4c0692043ff643 a02497ca54616dc8 dafce7026454e4b1
3e847f9dc45f37c0 445c0f55f46abeb9 cb349e0da4342532 b1eceec59401ac4b
febc9aee5c1e814f 8464ea266c2b0836 0b0c7b7e3c7593bd 71d40bb60c401ac4
e8a46c1224f5a634 927c1cda14c02f4d 1d148d82449eb4c6 67ccfd4a74ab3dbf
289c8961bcb410bb 5244f9a98c8199c2 dd2c68f1dcdf0249 a7f41839ecea8b30
438c80a64ce15841 3954f06e7cd4d138 b63c61362c8a4ab3 cce411fe1cbfc3ca
83b465d5d4a0eece f96c151de49567b7 76048445b4cbfc3c 0cdcf48d84fe7545
6fbd6d5ebd3716b7 15651d968d029fce 9a0d8ccedd5c0445 e0d5fc06ed698d3c
af85882d2576a038 d55df8e515432941 5a3569bd451db2ca 20ed197575283bb3
c49581ead523e8c2 be4df122e51661bb 3125607ab548fa30 4bfd10b2857d7349
04ad64994d625e4d 7e7514517d57d734 f11d85092d094cbf 8bc5f5c11d3cc5c6
12b5926535897936 686de2ad05bcf04f e70573f555e26bc4 9ddd033d65d7e2bd
d28d7716adc8cfb9 a85507de9dfd46c0 273d9686cda3dd4b 5de5e64efd965432
b99d7ed15d9d8743 c3450e196da80e3a 4c2d9f413df695b1 36f5ef890dc31cc8
79a59ba2c5dc31cc 037deb6af5e9b8b5 8c157a32a5b7233e f6cd0afa9582aa47
4ad64994d625e4da 300e395ce6106da3 bf66a804b64ef628 c5bed8cc867b7f51
8aeeace74e645255 f036dc2f7e51db2c 7f5e4d772e0f40a7 05863dbf1e3ac9de
e1fea520be311aaf 9b26d5e88e0493d6 144e44b0de5a085d 6e963478ee6f8124
21c640532670ac20 5b1e309b16452559 d476a1c3461bbed2 aeaed10b762e37ab
37deb6af5e9b8b5b 4d06c6676eae0222 c26e573f3ef099a9 b8b627f70ec510d0
f7e653dcc6da3dd4 8d3e2314f6efb4ad 0256b24ca6b12f26 788ec2849684a65f
9cf65a1b368f752e e62e2ad306bafc57 6946bb8b56e467dc 139ecb4366d1eea5
5ccebf68aecec3a1 2616cfa09efb4ad8 a97e5ef8cea5d153 d3a62e30fe90582a
b0c7b7e3c7593bd8 ca1fc72bf76cb2a1 45775673a732292a 3faf26bb9707a053
70ff52905f188d57 0a2722586f2d042e 854fb3003f739fa5 ff97c3c80f4616dc
1bef5b57af4dc5ad 61372b9f9f784cd4 ee5fbac7cf26d75f 9487ca0fff135e26
dbd7be24370c7322 a10fceec0739fa5b 2e675fb4576761d0 54bf2f7c6752e8a9
cdcf48d84fe75459 b71738107fd2dd20 387fa9482f8c46ab 42a7d9801fb9cfd2
0df7adabd7a6e2d6 772fdd63e7936baf f8474c3bb7cdf024 829f3cf387f8795d
66e7a46c27f3aa2c 1c3fd4a417c62355 935745fc4798b8de e98f353477ad31a7
a6df411fbfb21ca3 dc0731d78f8795da 536fa08fdfd90e51 29b7d047efec8728
`.trim().split(/\s+/).map((x) => BigInt(`0x${x}`));

Deno.test('table', () => {
	assertEquals(CRC_64_JONES.table(), table);
});

Deno.test('123456789', () => {
	let c = CRC_64_JONES.init();
	c = CRC_64_JONES.update(c, new TextEncoder().encode('123456789'));
	c = CRC_64_JONES.finalize(c);
	assertEquals(c, 0xcaa717168609f281n);
});
